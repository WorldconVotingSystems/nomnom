convention_name: "NomNomCon2 2024"
project_slug:
  type: str
  help: |
    This will be used in places where the project name needs to be referenced in code, but not as an identifier.
  default: "{{ convention_name.strip().lower().replace(' ', '-') }}"
domain_name:
  type: str
  help: "The convention website URL"
  default: "{{ project_slug }}.org"
email_domain_name:
  type: str
  help: "The email domain name, if different"
  default: "{{ domain_name }}"
app:
  type: str
  default: "{{ project_slug.replace('-', '_') }}_app"
  when: false
advisory_votes:
  type: bool
  default: true
  help: "Will your convention enable advisory votes? This updates {{ app }}/convention.py to configure them"

hugo_packet_enabled:
  type: bool
  default: true

use_development:
  type: bool
  default: false
  help: "Whether to use the checked out version of nomnom"

development_path:
  type: str
  help: "Enter the path to your nomnom checkout"
  when: "{{ use_development }}"

_subdirectory: "convention-template"
_skip_if_exists:
  - .envrc
  - .env
_message_after_copy: |
  Your convention site {{ convention_name }} is now set up.

  It's almost ready to go, but there are some steps you'll need to do the first
  time to set up your environment.

  0. Ensure you have `just` installed:

      brew install just

  1. Set up your dependencies:

      uv venv
      uv sync

  2. Configure your web application ports for local development. This is so that nomnom doesn't collide with any existing ports you use, but still offers local connections to the db and redis and webserver.

      scripts/get_web_port.sh

  3. Commit the final template code to git, so you know where to start.

  4. The .env file isn't set up with your local ports and credentials. Run this:

      just resetdb  # note -- this will DELETE ALL YOUR DEVELOPMENT DATA, skip it if you're not sure.
      just bootstrap

  5. Once this is done, you can run the website using `just serve` and the email workers using `just worker`
