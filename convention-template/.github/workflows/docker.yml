name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: "41 14 * * *"
  push:
    branches: ["main"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io

jobs:
  prepare:
    permissions: {}
    runs-on: ubuntu-latest
    steps:
      - name: set the build step environment
        run: |
          # what even the fuck is this.
          # here purely because of https://github.com/orgs/community/discussions/25768
          registry_image=$REGISTRY/${{ github.repository }}
          echo REGISTRY_IMAGE_LC="${registry_image,,}" >> "$GITHUB_ENV"

          # Default to allowing push
          echo "CAN_PUSH_IMAGES=true" >> "$GITHUB_ENV"

      - name: Check for push image permissions
        # if this is a pull request from another repository, then disable pushing
        if: github.event.pull_request.head.repo.full_name != github.repository && github.event_name == 'pull_request'
        run: |
          echo "This is a pull request from an external repository. Disabling image push."
          echo "CAN_PUSH_IMAGES=false" >> "$GITHUB_ENV"

      - name: persist the push instruction
        id: persist
        run: |
          echo "can_push_images=$CAN_PUSH_IMAGES" >> "$GITHUB_OUTPUT"
          echo "registry_image=$REGISTRY_IMAGE_LC" >> "$GITHUB_OUTPUT"
    outputs:
      can_push_images: ${{ steps.persist.outputs.can_push_images }}
      registry_image: ${{ steps.persist.outputs.registry_image }}

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    env:
      CAN_PUSH_IMAGES: ${{ needs.prepare.outputs.can_push_images }}
      REGISTRY_IMAGE: ${{ needs.prepare.outputs.registry_image }}

    steps:
      - name: Set up the platform
        run: |
          # set the platform pair for later
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> "$GITHUB_ENV"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: env.CAN_PUSH_IMAGES == 'true'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY_IMAGE }}

          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: ${{ env.CAN_PUSH_IMAGES == 'true' }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest
        env:
          IMAGE_DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          mkdir -p /tmp/digests
          digest="$IMAGE_DIGEST"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    needs:
      - prepare
      - build
    env:
      CAN_PUSH_IMAGES: ${{ needs.prepare.outputs.can_push_images }}
      REGISTRY_IMAGE: ${{ needs.prepare.outputs.registry_image }}

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        if: ${{ env.CAN_PUSH_IMAGES }}
        run: |
          docker buildx imagetools create \
              "$(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")" \
              "$(printf "$REGISTRY_IMAGE@sha256:%s " *)"

      - name: Inspect image
        env:
          IMAGE_VERSION: ${{ steps.meta.outputs.version }}
        run: |
          docker buildx imagetools inspect "${REGISTRY_IMAGE}:${IMAGE_VERSION}"
